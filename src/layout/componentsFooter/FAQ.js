import React, { useState } from "react";
import { Container, Typography, Box, Collapse, useTheme, IconButton } from "@mui/material";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";

const FAQ = () => {
  const staticInfo = [
    {
      title: "Th·ªùi gian nh·∫≠n ph√≤ng",
      content:
        "Gi·ªù nh·∫≠n ph√≤ng t·ª´ 12h15-12h30. N·∫øu qu√Ω kh√°ch kh√¥ng s·ª≠ d·ª•ng d·ªãch v·ª• xe ƒë∆∞a ƒë√≥n c·ªßa t√†u v√† t·ª± di chuy·ªÉn, vui l√≤ng c√≥ m·∫∑t t·∫°i b·∫øn t√†u mu·ªôn nh·∫•t l√† 11h45 ƒë·ªÉ l√†m th·ªß t·ª•c tr∆∞·ªõc khi l√™n t√†u.",
    },
    {
      title: "Th·ªùi gian tr·∫£ ph√≤ng",
      content:
        "Gi·ªù tr·∫£ ph√≤ng t·ª´ 9h30-10h30 t√πy thu·ªôc v√†o l·ªãch tr√¨nh c·ªßa t√†u. Sau khi tr·∫£ ph√≤ng, qu√Ω kh√°ch s·∫Ω ƒë∆∞·ª£c ph·ª•c v·ª• b·ªØa tr∆∞a tr√™n t√†u tr∆∞·ªõc khi t√†u c·∫≠p b·∫øn.",
    },
    {
      title: "Ch√≠nh s√°ch h·ªßy ph√≤ng",
      content:
        "ƒê·∫∑t ph√≤ng kh√¥ng ƒë∆∞·ª£c ho√†n/h·ªßy nh∆∞ng c√≥ th·ªÉ ƒë·ªïi ng√†y n·∫øu th√¥ng b√°o tr∆∞·ªõc √≠t nh·∫•t 7 ng√†y. Vui l√≤ng li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.",
    },
  ];

  const faqData = [
    {
      question: "D·ªãch v·ª• xe ƒë∆∞a ƒë√≥n c√≥ bao g·ªìm trong gi√° tour kh√¥ng?",
      answer: "Xe ƒë∆∞a ƒë√≥n 2 chi·ªÅu kh√¥ng bao g·ªìm trong gi√° tour. Qu√Ω kh√°ch c√≥ th·ªÉ ƒë·∫∑t th√™m d·ªãch v·ª• n√†y.",
    },
    {
      question: "Nh√† h√†ng c·ªßa du thuy·ªÅn ph·ª•c v·ª• b·ªØa ƒÉn theo phong c√°ch g√¨?",
      answer:
        "Th·ª©c ƒÉn c·ªßa nh√† h√†ng s·∫Ω ƒë∆∞·ª£c ph·ª•c v·ª• c√°c m√≥n ƒÉn theo phong c√°ch Vi·ªát v√† √Çu. N·∫øu qu√Ω kh√°ch c√≥ y√™u c·∫ßu ri√™ng, vui l√≤ng th√¥ng b√°o tr∆∞·ªõc √≠t nh·∫•t 03 ng√†y v·ªõi du thuy·ªÅn.",
    },
    {
      question: "T√¥i c√≥ ƒë∆∞·ª£c ph√©p mang th√∫ c∆∞ng l√™n t√†u kh√¥ng?",
      answer: "Th√∫ c∆∞ng kh√¥ng ƒë∆∞·ª£c ph√©p mang l√™n du thuy·ªÅn.",
    },
    {
      question: "Du thuy·ªÅn c√≥ d·ªãch v·ª• massage kh√¥ng?",
      answer: "C√≥. Du thuy·ªÅn cung c·∫•p d·ªãch v·ª• massage chuy√™n nghi·ªáp c√≥ t√≠nh ph√≠ (kh√¥ng bao g·ªìm trong gi√° tour).",
    },
    {
      question: "N·∫øu ng√†y ƒëi tour c·ªßa t√¥i ƒë√∫ng v√†o sinh nh·∫≠t th√¨ c√≥ ∆∞u ƒë√£i g√¨ kh√¥ng?",
      answer:
        "Du thuy·ªÅn s·∫Ω t·∫∑ng b√°nh sinh nh·∫≠t nh·ªè v√† c√≥ th·ªÉ chu·∫©n b·ªã c√°c d·ªãch v·ª• ƒë·∫∑c bi·ªát (trang tr√≠, b√†n ƒÉn ri√™ng...) n·∫øu ƒë∆∞·ª£c th√¥ng b√°o tr∆∞·ªõc.",
    },
    {
      question: "Tr√™n t√†u c√≥ wifi kh√¥ng? T·ªëc ƒë·ªô m·∫°ng ·ªïn kh√¥ng v·∫≠y?",
      answer:
        "C√≥ wifi mi·ªÖn ph√≠ nh∆∞ng t·ªëc ƒë·ªô ph·ª• thu·ªôc v√†o v·ªã tr√≠ v√† th·ªùi ti·∫øt, ƒë√¥i khi m·∫°ng s·∫Ω ch·∫≠p ch·ªùn do ·ªü xa ƒë·∫•t li·ªÅn.",
    },
    {
      question: "T√¥i ƒÉn chay / d·ªã ·ª©ng h·∫£i s·∫£n th√¨ c√≥ ƒë∆∞·ª£c ph·ª•c v·ª• m√≥n ƒë·∫∑c bi·ªát kh√¥ng?",
      answer: "ƒê∆∞·ª£c nha qu√Ω kh√°ch. Vui l√≤ng th√¥ng b√°o tr∆∞·ªõc √≠t nh·∫•t 03 ng√†y ƒë·ªÉ nh√† b·∫øp chu·∫©n b·ªã th·ª±c ƒë∆°n ph√π h·ª£p.",
    },
    {
      question: "N·∫øu tr·ªùi m∆∞a ho·∫∑c b√£o th√¨ c√≥ ƒë∆∞·ª£c ho√†n ti·ªÅn kh√¥ng?",
      answer:
        "Trong tr∆∞·ªùng h·ª£p th·ªùi ti·∫øt x·∫•u v√† tour bu·ªôc ph·∫£i h·ªßy, qu√Ω kh√°ch s·∫Ω ƒë∆∞·ª£c ho√†n ti·ªÅn 100% ho·∫∑c ƒë·ªïi sang ng√†y kh√°c t√πy l·ª±a ch·ªçn.",
    },
    {
      question: "Du thuy·ªÅn c√≥ cho mang theo r∆∞·ª£u/ƒë·ªì u·ªëng ri√™ng kh√¥ng?",
      answer: "Qu√Ω kh√°ch c√≥ th·ªÉ mang theo nh∆∞ng s·∫Ω c√≥ ph·ª• ph√≠ ph·ª•c v·ª• m·ªü r∆∞·ª£u theo quy ƒë·ªãnh c·ªßa t√†u (corkage fee).",
    },
    {
      question: "T√¥i c√≥ th·ªÉ t·ªï ch·ª©c c·∫ßu h√¥n ho·∫∑c sinh nh·∫≠t b·∫•t ng·ªù tr√™n t√†u kh√¥ng?",
      answer:
        "Ch·∫Øc ch·∫Øn ƒë∆∞·ª£c lu√¥n! ƒê·ªôi ng≈© t√†u h·ªó tr·ª£ t·∫≠n rƒÉng t·ª´ trang tr√≠, b√°nh, n·∫øn cho t·ªõi nh·∫°c nh·∫π deep chill. H√£y b√°o tr∆∞·ªõc ƒë·ªÉ l√™n k·∫ø ho·∫°ch th·∫≠t ng·∫ßu nha!",
    },
    {
      question: "N·∫øu t√¥i say s√≥ng th√¨ t√†u c√≥ thu·ªëc hay h·ªó tr·ª£ g√¨ kh√¥ng?",
      answer:
        "Tr√™n t√†u c√≥ s·∫µn thu·ªëc say s√≥ng v√† ƒë·ªôi ng≈© y t·∫ø h·ªó tr·ª£ c∆° b·∫£n. Tuy nhi√™n, n·∫øu bi·∫øt m√¨nh d·ªÖ b·ªã say, qu√Ω kh√°ch n√™n u·ªëng thu·ªëc tr∆∞·ªõc khi t√†u r·ªùi b·∫øn nh√©.",
    },
    {
      question: "T√†u c√≥ ho·∫°t ƒë·ªông vui ch∆°i bu·ªïi t·ªëi kh√¥ng hay ch·ªâ ƒÉn r·ªìi ƒëi ng·ªß?",
      answer:
        "Bu·ªïi t·ªëi tr√™n t√†u si√™u chill v·ªõi nhi·ªÅu ho·∫°t ƒë·ªông nh∆∞ c√¢u m·ª±c, xem phim, nh·∫°c s·ªëng, karaoke ho·∫∑c ƒë∆°n gi·∫£n l√† ng·ªìi boong t√†u u·ªëng cocktail ng·∫Øm sao ‚ú®.",
    },
    {
      question: "Tr√™n t√†u c√≥ b√°n tr√† s·ªØa kh√¥ng?",
      answer: "T·∫°m th·ªùi ch∆∞a c√≥ nha b·∫°n, nh∆∞ng c√≥ cocktail chill chill v√† n∆∞·ªõc tr√°i c√¢y √©p t∆∞∆°i x·ªãn x√≤ nha!",
    },
    {
      question: "T√¥i c√≥ th·ªÉ livestream review chuy·∫øn ƒëi kh√¥ng hay b·ªã c·∫•m v·∫≠y?",
      answer: "Quay review tho·∫£i m√°i lu√¥n mom ∆°i, mi·ªÖn l√† kh√¥ng l√†m ·∫£nh h∆∞·ªüng t·ªõi c√°c h√†nh kh√°ch kh√°c l√† okela üòé.",
    },
  ];
  
  const theme = useTheme();
  //const [openList, setOpenList] = useState([]);//m·∫∑c ƒë·ªãnh l√† ƒëang ƒë√≥ng
  const [openList, setOpenList] = useState(faqData.map((_, index) => index)); // m·∫∑c ƒë·ªãnh l√† ƒëang m·ªü t·∫•t c·∫£ c√°c m·ª•c

  const toggleFAQ = (index) => {
    if (openList.includes(index)) {
      setOpenList(openList.filter((i) => i !== index));
    } else {
      setOpenList([...openList, index]);
    }
  };

  return (
    <Container maxWidth="lg" sx={{ py: 10, fontFamily: "Roboto, Arial, sans-serif" }}>
      {/* Header */}
      <Box
        sx={{
          bgcolor: "background.paper",
          borderRadius: "24px",
          boxShadow: theme.shadows[2],
          p: 6,
        }}
      >
        <Typography variant="h2" sx={{ fontWeight: "bold", color: "text.primary", mb: 4 }}>
          C√¢u H·ªèi Th∆∞·ªùng G·∫∑p
        </Typography>

        <Box component="img" src="/images/border.jpg" alt="Divider" sx={{ my: 4, width: "20%", display: "block" }} />

        {/* Static Info Boxes */}
        <Box sx={{ display: "flex", flexDirection: "column", gap: 4, mb: 6 }}>
          {staticInfo.map((item, i) => (
            <Box
              key={i}
              sx={{
                p: 4,
                border: 1,
                borderColor: "divider",
                borderRadius: "16px",
                bgcolor: "action.hover",
                boxShadow: theme.shadows[1],
                transition: "all 0.3s ease",
                "&:hover": {
                  boxShadow: theme.shadows[2],
                },
              }}
            >
              <Typography variant="h6" sx={{ fontWeight: "medium", color: "text.primary", mb: 1 }}>
                {item.title}
              </Typography>
              <Typography variant="body2" sx={{ color: "text.secondary" }}>
                {item.content}
              </Typography>
            </Box>
          ))}
        </Box>

        {/* FAQ Accordion List */}
        <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
          {faqData.map((item, index) => (
            <Box
              key={index}
              sx={{
                border: 1,
                borderColor: "divider",
                borderRadius: "12px",
                bgcolor: "background.default",
                boxShadow: theme.shadows[0],
              }}
            >
              <Box
                onClick={() => toggleFAQ(index)}
                sx={{
                  px: 4,
                  py: 3,
                  display: "flex",
                  justifyContent: "space-between",
                  alignItems: "center",
                  cursor: "pointer",
                  "&:hover": { bgcolor: "action.hover" },
                }}
              >
                <Typography variant="subtitle1" sx={{ fontWeight: "medium", color: "text.primary" }}>
                  {item.question}
                </Typography>
                <IconButton size="small">
                  <ExpandMoreIcon
                    sx={{
                      transform: openList.includes(index) ? "rotate(180deg)" : "rotate(0)",
                      transition: "transform 0.3s ease",
                    }}
                  />
                </IconButton>
              </Box>
              <Collapse in={openList.includes(index)}>
                <Box sx={{ px: 4, pb: 3 }}>
                  <Typography variant="body2" sx={{ color: "text.secondary" }}>
                    {item.answer}
                  </Typography>
                </Box>
              </Collapse>
            </Box>
          ))}
        </Box>
      </Box>
    </Container>
  );
};

export default FAQ;
